AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  backend
  Sample SAM Template for backend

Parameters:
  GameStateMachineName:
    Type: String
    Default: GameLogic
  StageName:
    Type: String
    Default: Staging
  GameBucketName:
    Type: String
    Default: game-photo-bucket

Resources:
  GameBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref GameBucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
            AllowedOrigins:
              - "*"
      VersioningConfiguration:
        Status: Enabled
  GameApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: GameApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GameApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GameApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GameApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GameApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GameApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - /
        - - integrations
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GameApi
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  StartGameRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GameApi
      RouteKey: startgame
      AuthorizationType: NONE
      OperationName: StartGameRoute
      Target: !Join
        - /
        - - integrations
          - !Ref StartGameInteg
  StartGameInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GameApi
      Description: StartGame Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartGameFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref GameApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      Description: Staging Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref GameApi

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/on_connect/
      Handler: app.lambda_handler
      MemorySize: 128
      Runtime: python3.13
      Timeout: 35
      Environment:
        Variables:
          game_state_machine_arn: !Sub
              - "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${name}"
              - name: !Ref GameStateMachineName
          connections_url: !Sub "https://${GameApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
      Policies: 
        - Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
              - states:DescribeExecution
            Resource:
              - !Sub
                - "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${name}"
                - name: !Ref GameStateMachineName
              - !Sub
                - "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${name}:*"
                - name: !Ref GameStateMachineName
        - Statement:
          - Effect: Allow
            Action: execute-api:ManageConnections
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GameApi}/*         
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GameApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
    
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/on_disconnect/
      Handler: app.lambda_handler
      MemorySize: 128
      Runtime: python3.13
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GameApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/send_message/
      Handler: app.lambda_handler
      MemorySize: 128
      Runtime: python3.13
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource:
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GameApi}/*
        - Statement:
          - Effect: Allow
            Action:
              - states:SendTaskSuccess
            Resource:
              - !Sub
                - "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${name}"
                - name: !Ref GameStateMachineName
              - !Sub
                - "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${name}:*"
                - name: !Ref GameStateMachineName
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GameApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

  StartGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/start_game/
      Handler: app.lambda_handler
      MemorySize: 128
      Runtime: python3.13
      Timeout: 35
      Policies: 
        - Statement:
          - Effect: Allow
            Action:
              - states:SendTaskSuccess
            Resource:
              - !Sub
                - "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${name}"
                - name: !Ref GameStateMachineName
              - !Sub
                - "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${name}:*"
                - name: !Ref GameStateMachineName
  StartGamePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GameApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartGameFunction
      Principal: apigateway.amazonaws.com

  GenerateRoundInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/generate_round_info/
      Handler: app.lambda_handler
      MemorySize: 128
      Runtime: python3.13
      Timeout: 15
      Environment:
        Variables:
          bucket_name: !Ref GameBucketName


  GameStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Ref GameStateMachineName
      DefinitionSubstitutions:
        ApiEndpoint: !Sub ${GameApi}.execute-api.${AWS::Region}.amazonaws.com
        Stage: !Ref Stage
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref OnConnectFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref OnDisconnectFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SendMessageFunction
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
                - execute-api:Invoke
              Resource:
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GameApi}/*
      DefinitionUri: statemachine/game.asl.json
    DependsOn: GameApi



Outputs:
  GameStateMachineArn:
    Description: Game state machine machine ARN
    Value: !Ref GameStateMachine
  GameStateMachineRoleArn:
    Description: IAM Role created for the game state machine
    Value: !GetAtt GameStateMachineRole.Arn